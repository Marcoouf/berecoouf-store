generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Artist {
  id         String    @id @default(cuid())
  slug       String    @unique
  name       String
  bio        String?
  socials    String[]  @default([])
  image      String?   @map("coverUrl")
  portrait   String?   @map("avatarUrl")
  contactEmail String?
  handle     String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isArchived Boolean   @default(false)
  deletedAt  DateTime?
  works      Work[]

  @@index([isArchived, deletedAt])
}

model Work {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String?
  year        Int?
  technique   String?
  paper       String?
  dimensions  String?
  edition     String?
  imageUrl    String
  mockupUrl   String?
  basePrice   Int?
  published   Boolean     @default(true)
  artistId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  variants    Variant[]
  orderItems  OrderItem[]
  artist      Artist      @relation(fields: [artistId], references: [id])

  @@index([artistId])
}

model Variant {
  id         String      @id @default(cuid())
  workId     String
  label      String
  price      Int
  order      Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  work       Work        @relation(fields: [workId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@index([workId])
}

enum OrderStatus {
  pending
  paid
  cancelled
  refunded
}

model Order {
  id              String      @id @default(cuid())
  email           String?
  total           Int // en centimes (subtotal produits ; les frais de port viennent de Stripe)
  status          OrderStatus @default(pending)
  stripeSessionId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  items OrderItem[]

  @@index([status])
  @@index([stripeSessionId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  workId    String
  variantId String
  qty       Int      @default(1)
  unitPrice Int // en centimes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  work    Work    @relation(fields: [workId], references: [id])
  variant Variant @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@index([workId])
  @@index([variantId])
}
