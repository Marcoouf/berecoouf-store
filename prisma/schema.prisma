generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Artist {
  id         String    @id @default(cuid())
  slug       String    @unique
  name       String
  bio        String?
  socials    String[]  @default([])
  image      String?   @map("coverUrl")
  portrait   String?   @map("avatarUrl")
  contactEmail String?
  handle     String?
  isOnVacation Boolean @default(false)
  isHidden   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isArchived Boolean   @default(false)
  deletedAt  DateTime?
  works      Work[]
  authors    ArtistAuthor[]

  @@index([isArchived, deletedAt])
}

model Work {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String?
  year        Int?
  technique   String?
  paper       String?
  dimensions  String?
  edition     String?
  imageUrl    String
  mockupUrl   String?
  basePrice   Int?
  published   Boolean     @default(true)
  artistId    String
  createdById String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  variants    Variant[]
  orderItems  OrderItem[]
  artist      Artist      @relation(fields: [artistId], references: [id])
  createdBy   User?       @relation(fields: [createdById], references: [id])

  @@index([artistId])
}

model Variant {
  id         String      @id @default(cuid())
  workId     String
  label      String
  price      Int
  order      Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  work       Work        @relation(fields: [workId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@index([workId])
}

enum OrderStatus {
  pending
  paid
  cancelled
  refunded
}

model Order {
  id              String      @id @default(cuid())
  email           String?
  total           Int // en centimes (subtotal produits ; les frais de port viennent de Stripe)
  status          OrderStatus @default(pending)
  stripeSessionId String?
  shippingStatus  ShippingStatus @default(pending)
  trackingUrl     String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  items OrderItem[]

  @@index([status])
  @@index([stripeSessionId])
}

enum ShippingStatus {
  pending
  packing
  shipped
  delivered
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  workId    String
  variantId String
  qty       Int      @default(1)
  unitPrice Int // en centimes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  work    Work    @relation(fields: [workId], references: [id])
  variant Variant @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@index([workId])
  @@index([variantId])
}

enum UserRole {
  admin
  author
}

model User {
  id           String          @id @default(cuid())
  email        String          @unique
  name         String?
  passwordHash String?
  role         UserRole        @default(author)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  artists      ArtistAuthor[]
  works        Work[]
  accounts     Account[]
  sessions     Session[]
  loginEvents  LoginEvent[]
}

model ArtistAuthor {
  userId    String
  artistId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@id([userId, artistId])
  @@index([artistId])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model LoginEvent {
  id        String   @id @default(cuid())
  userId    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProcessedEvent {
  id         String   @id
  processedAt DateTime @default(now())
}
